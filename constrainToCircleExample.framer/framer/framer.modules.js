require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"constrainToCircle":[function(require,module,exports){
var aX, d, layerAnimates, magV, vX, vY;

d = 0.0;

vX = 0.0;

vY = 0.0;

magV = 0.0;

aX = 0.0;

layerAnimates = false;

exports.enable = function(layer, circleCenterX, circleCenterY, radius) {
  var helper;
  helper = layer.copy();
  helper.name = "circleConstraintHelper";
  helper.opacity = 0;
  helper.index = layer.index + 1;
  helper.draggable.enabled = true;
  helper.draggable.momentum = false;
  exports.helper = helper;
  helper.on(Events.DragStart, function() {
    layerAnimates = false;
    layer.animateStop();
    return layer.emit(Events.DragStart);
  });
  helper.on(Events.DragMove, function() {
    var aY;
    layer.emit(Events.DragMove);
    d = Math.pow(helper.x - circleCenterX, 2) + Math.pow(helper.y - circleCenterY, 2);
    if (d > Math.pow(radius, 2)) {
      vX = helper.x - circleCenterX;
      vY = helper.y - circleCenterY;
      magV = Math.sqrt(vX * vX + vY * vY);
      aX = circleCenterX + vX / magV * radius;
      aY = circleCenterY + vY / magV * radius;
      layer.x = aX;
      return layer.y = aY;
    } else {
      layer.x = helper.x;
      return layer.y = helper.y;
    }
  });
  helper.on(Events.DragEnd, function() {
    layer.emit(Events.DragEnd);
    helper.x = layer.x;
    return helper.y = layer.y;
  });
  layer.on(Events.AnimationStart, function() {
    return layerAnimates = true;
  });
  layer.on(Events.AnimationEnd, function() {
    return layerAnimates = false;
  });
  layer.on("change:frame", function() {
    if (layerAnimates === true) {
      helper.x = layer.x;
      helper.y = layer.y;
      helper.width = layer.width;
      helper.height = layer.height;
      helper.rotation = layer.rotation;
      return helper.index = layer.index + 1;
    }
  });
  exports.update = function(layer, circleCenterX, circleCenterY, radius) {
    helper.destroy();
    return exports.enable(layer, circleCenterX, circleCenterY, radius);
  };
  return exports.disable = function(layerA) {
    return helper.destroy();
  };
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbWFyY2tyZW5uL0Ryb3Bib3gvZnJhbWVyX3Byb2plY3RzL2NvbnN0cmFpblRvQ2lyY2xlRXhhbXBsZS5mcmFtZXIvbW9kdWxlcy9jb25zdHJhaW5Ub0NpcmNsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNPQSxJQUFBOztBQUFBLENBQUEsR0FBSTs7QUFDSixFQUFBLEdBQUs7O0FBQ0wsRUFBQSxHQUFLOztBQUNMLElBQUEsR0FBTzs7QUFDUCxFQUFBLEdBQUs7O0FBQ0wsYUFBQSxHQUFnQjs7QUFHaEIsT0FBTyxDQUFDLE1BQVIsR0FBaUIsU0FBQyxLQUFELEVBQU8sYUFBUCxFQUFxQixhQUFyQixFQUFtQyxNQUFuQztBQUViLE1BQUE7RUFBQSxNQUFBLEdBQVMsS0FBSyxDQUFDLElBQU4sQ0FBQTtFQUNULE1BQU0sQ0FBQyxJQUFQLEdBQWM7RUFDZCxNQUFNLENBQUMsT0FBUCxHQUFpQjtFQUNqQixNQUFNLENBQUMsS0FBUCxHQUFlLEtBQUssQ0FBQyxLQUFOLEdBQWM7RUFDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFqQixHQUEyQjtFQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLFFBQWpCLEdBQTRCO0VBQzVCLE9BQU8sQ0FBQyxNQUFSLEdBQWlCO0VBRWpCLE1BQU0sQ0FBQyxFQUFQLENBQVUsTUFBTSxDQUFDLFNBQWpCLEVBQTRCLFNBQUE7SUFFeEIsYUFBQSxHQUFnQjtJQUNoQixLQUFLLENBQUMsV0FBTixDQUFBO1dBRUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxNQUFNLENBQUMsU0FBbEI7RUFMd0IsQ0FBNUI7RUFPQSxNQUFNLENBQUMsRUFBUCxDQUFVLE1BQU0sQ0FBQyxRQUFqQixFQUEyQixTQUFBO0FBRXZCLFFBQUE7SUFBQSxLQUFLLENBQUMsSUFBTixDQUFXLE1BQU0sQ0FBQyxRQUFsQjtJQUVBLENBQUEsWUFBSyxNQUFNLENBQUMsQ0FBUCxHQUFXLGVBQWtCLEVBQTlCLFlBQW1DLE1BQU0sQ0FBQyxDQUFQLEdBQVcsZUFBa0I7SUFFcEUsSUFBRyxDQUFBLFlBQUksUUFBVSxFQUFqQjtNQUNJLEVBQUEsR0FBSyxNQUFNLENBQUMsQ0FBUCxHQUFXO01BQ2hCLEVBQUEsR0FBSyxNQUFNLENBQUMsQ0FBUCxHQUFXO01BQ2hCLElBQUEsR0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLEVBQUEsR0FBSyxFQUFMLEdBQVUsRUFBQSxHQUFLLEVBQXpCO01BQ1AsRUFBQSxHQUFLLGFBQUEsR0FBZ0IsRUFBQSxHQUFLLElBQUwsR0FBWTtNQUNqQyxFQUFBLEdBQUssYUFBQSxHQUFnQixFQUFBLEdBQUssSUFBTCxHQUFZO01BRWpDLEtBQUssQ0FBQyxDQUFOLEdBQVU7YUFDVixLQUFLLENBQUMsQ0FBTixHQUFVLEdBUmQ7S0FBQSxNQUFBO01BV0ksS0FBSyxDQUFDLENBQU4sR0FBVSxNQUFNLENBQUM7YUFDakIsS0FBSyxDQUFDLENBQU4sR0FBVSxNQUFNLENBQUMsRUFackI7O0VBTnVCLENBQTNCO0VBb0JBLE1BQU0sQ0FBQyxFQUFQLENBQVUsTUFBTSxDQUFDLE9BQWpCLEVBQTBCLFNBQUE7SUFFdEIsS0FBSyxDQUFDLElBQU4sQ0FBVyxNQUFNLENBQUMsT0FBbEI7SUFFQSxNQUFNLENBQUMsQ0FBUCxHQUFXLEtBQUssQ0FBQztXQUNqQixNQUFNLENBQUMsQ0FBUCxHQUFXLEtBQUssQ0FBQztFQUxLLENBQTFCO0VBT0EsS0FBSyxDQUFDLEVBQU4sQ0FBUyxNQUFNLENBQUMsY0FBaEIsRUFBZ0MsU0FBQTtXQUM1QixhQUFBLEdBQWdCO0VBRFksQ0FBaEM7RUFHQSxLQUFLLENBQUMsRUFBTixDQUFTLE1BQU0sQ0FBQyxZQUFoQixFQUE4QixTQUFBO1dBQzFCLGFBQUEsR0FBZ0I7RUFEVSxDQUE5QjtFQUdBLEtBQUssQ0FBQyxFQUFOLENBQVMsY0FBVCxFQUF5QixTQUFBO0lBRXJCLElBQUcsYUFBQSxLQUFpQixJQUFwQjtNQUNJLE1BQU0sQ0FBQyxDQUFQLEdBQVcsS0FBSyxDQUFDO01BQ2pCLE1BQU0sQ0FBQyxDQUFQLEdBQVcsS0FBSyxDQUFDO01BQ2pCLE1BQU0sQ0FBQyxLQUFQLEdBQWUsS0FBSyxDQUFDO01BQ3JCLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLEtBQUssQ0FBQztNQUN0QixNQUFNLENBQUMsUUFBUCxHQUFrQixLQUFLLENBQUM7YUFDeEIsTUFBTSxDQUFDLEtBQVAsR0FBZSxLQUFLLENBQUMsS0FBTixHQUFjLEVBTmpDOztFQUZxQixDQUF6QjtFQVlBLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLFNBQUMsS0FBRCxFQUFPLGFBQVAsRUFBcUIsYUFBckIsRUFBbUMsTUFBbkM7SUFFYixNQUFNLENBQUMsT0FBUCxDQUFBO1dBQ0EsT0FBTyxDQUFDLE1BQVIsQ0FBZSxLQUFmLEVBQXFCLGFBQXJCLEVBQW1DLGFBQW5DLEVBQWlELE1BQWpEO0VBSGE7U0FNakIsT0FBTyxDQUFDLE9BQVIsR0FBa0IsU0FBQyxNQUFEO1dBRWQsTUFBTSxDQUFDLE9BQVAsQ0FBQTtFQUZjO0FBcEVMIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMgJ2NvbnN0cmFpblRvQ2lyY2xlJyBtb2R1bGUgdjEuMFxuIyBieSBNYXJjIEtyZW5uLCBTZXB0LiAyMDE1IHwgbWFyYy5rcmVubkBnbWFpbC5jb20gfCBAbWFyY19rcmVublxuIyBwcm9icyB0byBUaXNobyBHZW9yZ2lldiBhbmQgQnJpYW4gTS4gU2NvdHRcbiNcbiMgQWRkIHRoZSBmb2xsb3dpbmcgbGluZSB0byB5b3VyIHByb2plY3QgaW4gRnJhbWVyIFN0dWRpby4gXG4jIGNvbnN0cmFpblRvQ2lyY2xlID0gcmVxdWlyZSBcImNvbnN0cmFpblRvQ2lyY2xlXCJcblxuZCA9IDAuMFxudlggPSAwLjBcbnZZID0gMC4wXG5tYWdWID0gMC4wXG5hWCA9IDAuMFxubGF5ZXJBbmltYXRlcyA9IGZhbHNlXG5cbiMgRW5hYmxlcyBkcmFnZ2luZyBhbmQgY29uc3RyYWlucyBkcmFnZ2luZy1kaXN0YW5jZSB0byBhIGRlZmluZWQgY2lyY2xlXG5leHBvcnRzLmVuYWJsZSA9IChsYXllcixjaXJjbGVDZW50ZXJYLGNpcmNsZUNlbnRlclkscmFkaXVzKSAtPlxuICAgICAgICBcbiAgICBoZWxwZXIgPSBsYXllci5jb3B5KClcbiAgICBoZWxwZXIubmFtZSA9IFwiY2lyY2xlQ29uc3RyYWludEhlbHBlclwiXG4gICAgaGVscGVyLm9wYWNpdHkgPSAwXG4gICAgaGVscGVyLmluZGV4ID0gbGF5ZXIuaW5kZXggKyAxXG4gICAgaGVscGVyLmRyYWdnYWJsZS5lbmFibGVkID0gdHJ1ZVxuICAgIGhlbHBlci5kcmFnZ2FibGUubW9tZW50dW0gPSBmYWxzZVxuICAgIGV4cG9ydHMuaGVscGVyID0gaGVscGVyXG4gICAgICAgICAgICAgICAgXG4gICAgaGVscGVyLm9uIEV2ZW50cy5EcmFnU3RhcnQsIC0+XG4gICAgICAgIFxuICAgICAgICBsYXllckFuaW1hdGVzID0gZmFsc2VcbiAgICAgICAgbGF5ZXIuYW5pbWF0ZVN0b3AoKVxuICAgICAgICBcbiAgICAgICAgbGF5ZXIuZW1pdCBFdmVudHMuRHJhZ1N0YXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBoZWxwZXIub24gRXZlbnRzLkRyYWdNb3ZlLCAtPlxuXG4gICAgICAgIGxheWVyLmVtaXQgRXZlbnRzLkRyYWdNb3ZlXG4gICAgICAgIFxuICAgICAgICBkID0gKGhlbHBlci54IC0gY2lyY2xlQ2VudGVyWCkgKiogMiArIChoZWxwZXIueSAtIGNpcmNsZUNlbnRlclkpICoqIDJcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgaWYgZCA+IHJhZGl1cyAqKiAyXG4gICAgICAgICAgICB2WCA9IGhlbHBlci54IC0gY2lyY2xlQ2VudGVyWFxuICAgICAgICAgICAgdlkgPSBoZWxwZXIueSAtIGNpcmNsZUNlbnRlcllcbiAgICAgICAgICAgIG1hZ1YgPSBNYXRoLnNxcnQodlgqICB2WCArIHZZICogdlkpXG4gICAgICAgICAgICBhWCA9IGNpcmNsZUNlbnRlclggKyB2WCAvIG1hZ1YgKiByYWRpdXNcbiAgICAgICAgICAgIGFZID0gY2lyY2xlQ2VudGVyWSArIHZZIC8gbWFnViAqIHJhZGl1c1xuXHRcdFxuICAgICAgICAgICAgbGF5ZXIueCA9IGFYXG4gICAgICAgICAgICBsYXllci55ID0gYVlcbiAgICAgICAgICAgIFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBsYXllci54ID0gaGVscGVyLnhcbiAgICAgICAgICAgIGxheWVyLnkgPSBoZWxwZXIueVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBoZWxwZXIub24gRXZlbnRzLkRyYWdFbmQsIC0+XG4gICAgICAgIFxuICAgICAgICBsYXllci5lbWl0IEV2ZW50cy5EcmFnRW5kXG4gICAgICAgIFxuICAgICAgICBoZWxwZXIueCA9IGxheWVyLnhcbiAgICAgICAgaGVscGVyLnkgPSBsYXllci55XG4gICAgXG4gICAgbGF5ZXIub24gRXZlbnRzLkFuaW1hdGlvblN0YXJ0LCAtPlxuICAgICAgICBsYXllckFuaW1hdGVzID0gdHJ1ZVxuXG4gICAgbGF5ZXIub24gRXZlbnRzLkFuaW1hdGlvbkVuZCwgLT5cbiAgICAgICAgbGF5ZXJBbmltYXRlcyA9IGZhbHNlICAgIFxuICAgIFxuICAgIGxheWVyLm9uIFwiY2hhbmdlOmZyYW1lXCIsIC0+XG4gICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiBsYXllckFuaW1hdGVzID09IHRydWVcbiAgICAgICAgICAgIGhlbHBlci54ID0gbGF5ZXIueFxuICAgICAgICAgICAgaGVscGVyLnkgPSBsYXllci55XG4gICAgICAgICAgICBoZWxwZXIud2lkdGggPSBsYXllci53aWR0aFxuICAgICAgICAgICAgaGVscGVyLmhlaWdodCA9IGxheWVyLmhlaWdodFxuICAgICAgICAgICAgaGVscGVyLnJvdGF0aW9uID0gbGF5ZXIucm90YXRpb25cbiAgICAgICAgICAgIGhlbHBlci5pbmRleCA9IGxheWVyLmluZGV4ICsgMVxuICAgIFxuICAgIFxuICAgICMgVXBkYXRlc1xuICAgIGV4cG9ydHMudXBkYXRlID0gKGxheWVyLGNpcmNsZUNlbnRlclgsY2lyY2xlQ2VudGVyWSxyYWRpdXMpIC0+XG4gICAgICAgIFxuICAgICAgICBoZWxwZXIuZGVzdHJveSgpXG4gICAgICAgIGV4cG9ydHMuZW5hYmxlKGxheWVyLGNpcmNsZUNlbnRlclgsY2lyY2xlQ2VudGVyWSxyYWRpdXMpXG4gICAgICAgIFxuICAgICMgRGlzYWJsZXMgZHJhZ2dpbmdcbiAgICBleHBvcnRzLmRpc2FibGUgPSAobGF5ZXJBKSAtPlxuICAgICAgICBcbiAgICAgICAgaGVscGVyLmRlc3Ryb3koKSJdfQ==
