require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"nonlinearModulate":[function(require,module,exports){
Utils.modulate = function(value, rangeA, rangeB, curve, limit, multiplier) {
  var a, b, c, d, easeInBounce, easeOutBounce, fromHigh, fromLow, i, p, result, s, t, toHigh, toLow;
  if (curve == null) {
    curve = "linear";
  }
  if (limit == null) {
    limit = false;
  }
  if (multiplier == null) {
    multiplier = 1.70158;
  }
  fromLow = rangeA[0], fromHigh = rangeA[1];
  toLow = rangeB[0], toHigh = rangeB[1];
  if (toLow > toHigh) {
    c = toHigh - toLow;
    i = 1;
  } else {
    c = toLow - toHigh;
    i = -1;
  }
  t = value;
  b = toLow;
  d = fromHigh;
  s = multiplier;
  p = 0;
  a = c;
  switch (curve) {
    case "easeInQuad":
    case "ease-in":
      t /= d;
      result = c * t * t * +i + b;
      break;
    case "easeOutQuad":
    case "ease-out":
      t /= d;
      result = -c * t * (t - 2) * i + b;
      break;
    case "easeInOutQuad":
    case "ease-in-out":
      t /= d / 2;
      if (t < 1) {
        result = c / 2 * t * t * i + b;
      } else {
        t--;
        result = -c / 2 * (t * (t - 2) - 1) * i + b;
      }
      break;
    case "easeInCubic":
      t /= d;
      result = c * t * t * t * i + b;
      break;
    case "easeOutCubic":
      t /= d;
      t--;
      result = c * (t * t * t + 1) * i + b;
      break;
    case "easeInOutCubic":
      t /= d / 2;
      if (t < 1) {
        result = c / 2 * t * t * t * i + b;
      } else {
        t -= 2;
        result = c / 2 * (t * t * t + 2) * i + b;
      }
      break;
    case "easeInQuart":
      t /= d;
      result = c * t * t * t * t * i + b;
      break;
    case "easeOutQuart":
      t /= d;
      t--;
      result = -c * (t * t * t * t - 1) * i + b;
      break;
    case "easeInOutQuart":
      t /= d / 2;
      if (t < 1) {
        result = c / 2 * t * t * t * t * i + b;
      } else {
        t -= 2;
        result = -c / 2 * (t * t * t * t - 2) * i + b;
      }
      break;
    case "easeInQuint":
      t /= d;
      result = c * t * t * t * t * t * i + b;
      break;
    case "easeOutQuint":
      t /= d;
      t--;
      result = c * (t * t * t * t * t + 1) * i + b;
      break;
    case "easeInOutQuint":
      t /= d / 2;
      if (t < 1) {
        result = c / 2 * t * t * t * t * t * i + b;
      } else {
        t -= 2;
        result = c / 2 * (t * t * t * t * t + 2) * i + b;
      }
      break;
    case "easeInSine":
      result = (-c * Math.cos(t / d * (Math.PI / 2)) + c) * i + b;
      break;
    case "easeOutSine":
      result = c * Math.sin(t / d * (Math.PI / 2)) * i + b;
      break;
    case "easeInOutSine":
      result = -c / 2 * (Math.cos(Math.PI * t / d) - 1) * i + b;
      break;
    case "easeInExpo":
      result = c * Math.pow(2, 10 * (t / d - 1)) * i + b;
      break;
    case "easeOutExpo":
      result = c * (-Math.pow(2, -10 * t / d) + 1) * i + b;
      break;
    case "easeInOutExpo":
      t /= d / 2;
      if (t < 1) {
        result = c / 2 * Math.pow(2, 10 * (t - 1)) * i + b;
      } else {
        t--;
        result = c / 2 * (-Math.pow(2, -10 * t) + 2) * i + b;
      }
      break;
    case "easeInCirc":
      t /= d;
      result = -c * (Math.sqrt(1 - t * t) - 1) * i + b;
      break;
    case "easeOutCirc":
      t /= d;
      t--;
      result = c * Math.sqrt(1 - t * t) * i + b;
      break;
    case "easeInOutCirc":
      t /= d / 2;
      if (t < 1) {
        result = -c / 2 * (Math.sqrt(1 - t * t) - 1) * i + b;
      } else {
        t -= 2;
        result = c / 2 * (Math.sqrt(1 - t * t) + 1) * i + b;
      }
      break;
    case "easeInBack":
      result = c * (t /= d) * t * ((s + 1) * t - s) * i + b;
      break;
    case "easeOutBack":
      result = (c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1)) * i + b;
      break;
    case "easeInOutBack":
      if ((t /= d / 2) < 1) {
        return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) * i + b;
      } else {
        return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) * i + b;
      }
      break;
    case "easeInElastic":
      if (t === 0) {
        result = b;
      }
      if ((t /= d) === 1) {
        result = b + c;
      }
      if (!p) {
        p = d * .3;
      }
      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      }
      s = p / (2 * Math.PI) * Math.asin(c / a);
      result = -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) * i + b;
      break;
    case "easeOutElastic":
      if (t === 0) {
        result = b;
      }
      if ((t /= d) === 1) {
        result = b + c;
      }
      if (!p) {
        p = d * .3;
      }
      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      }
      s = p / (2 * Math.PI) * Math.asin(c / a);
      result = (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c) * i + b;
      break;
    case "easeInOutElastic":
      result = c * t / d * i + b;

      /*
      			if t==0
      
      				result = b
      
      			if (t/=d/2)==2
      
      				result = b+c
      
      			if !p
      
      				p=d*(.3*1.5)
      
      			if a < Math.abs(c)
      
      				a=c
      				s=p/4
      
      
      			s = p/(2*Math.PI) * Math.asin (c/a)
      
      			if t < 1
      
      				result = (-0.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )))*i
      
      			else
      
      			result = (a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c)*i + b
       */
      break;
    case "easeInBounce":
      easeOutBounce = function(t, b, c, d) {
        if ((t /= d) < (1 / 2.75)) {
          return c * (7.5625 * t * t) + b;
        } else if (t < (2 / 2.75)) {
          return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
        } else if (t < (2.5 / 2.75)) {
          return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
        } else {
          return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
        }
      };
      result = (c - easeOutBounce(d - t, 0, c, d)) * i + b;
      break;
    case "easeOutBounce":
      if ((t /= d) < (1 / 2.75)) {
        result = c * (7.5625 * t * t) * i + b;
      } else if (t < (2 / 2.75)) {
        result = c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) * i + b;
      } else if (t < (2.5 / 2.75)) {
        result = c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) * i + b;
      } else {
        result = c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) * i + b;
      }
      break;
    case "easeInOutBounce":
      easeOutBounce = function(t, b, c, d) {
        if ((t /= d) < (1 / 2.75)) {
          return c * (7.5625 * t * t) + b;
        } else if (t < (2 / 2.75)) {
          return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
        } else if (t < (2.5 / 2.75)) {
          return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
        } else {
          return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
        }
      };
      easeInBounce = function(t, b, c, d) {
        return c - easeOutBounce(d - t, 0, c, d) + b;
      };
      if (t < d / 2) {
        result = (easeInBounce(t * 2, 0, c, d) * .5) * i + b;
      } else {
        result = (easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5) * i + b;
      }
      break;
    case true:
      limit = true;
      result = c * t / d * i + b;
      break;
    case false:
      limit = false;
      result = c * t / d * i + b;
      break;
    default:
      result = c * t / d * i + b;
  }
  if (limit === true) {
    if (toLow < toHigh) {
      if (result < toLow) {
        return toLow;
      }
      if (result > toHigh) {
        return toHigh;
      }
    } else {
      if (result > toLow) {
        return toLow;
      }
      if (result < toHigh) {
        return toHigh;
      }
    }
  }
  return result;
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
